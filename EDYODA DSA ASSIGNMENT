<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
  </head>
  <body>
    <script>
        
      console.log("Q1. Write a program to find all pairs of an integer array whose sum is equal to a given number?")
      let arr = [12, 14, 3, 5, 6, 4, 8, 5, 10];
      let key = 10;
      let res = [];
      let uniqueSet = new Set(arr);
      let unique = [];
      for (let val of uniqueSet) {
        unique.push(val);
      }
      for (let i = 0; i < unique.length; i++) {
        let pair = [];
        for (let j = 0; j < unique.length; j++) {
          if (unique[i] + unique[j] == key) {
            pair.push(unique[i], unique[j]);
          }
        }
        if (pair.length == 2) {
          res.push(pair);
        }
      }
      console.log(res);
     console.info("--------------------------------------------------------------")
      console.log("Q2. Write a program to reverse an array in place? In place means you cannot create a new array. You have to update the original array.")

let arr1=[5,10,15,20,25,30,35];

const rev_array=arr1=>{
for(let i =0; i<arr1.length/2; i++){
  [arr1[i],arr1[arr1.length-1-i]]=[arr1[arr1.length-1-i],arr1[i]]
}
return arr1;
}
console.log(rev_array(arr1))
console.info("-------------------------------------------------------------------------")
console.log("Q3. Write a program to check if two strings are a rotation of each other?")

function palindrome( s1,  s2)
   { 
       return (s1.length == s2.length) &&
       ((s1 + s1).indexOf(s2) != -1);
   }
 var s1 = "MADAM";
 var s2 = "MADAM";
 if (palindrome(s1, s2))
      console.log("Strings are rotations of each other");
 else
    console.log("Strings are not rotations of each other");
console.info("-------------------------------------------------------------------------")
console.log("Q4. Write a program to print the first non-repeated character from a string?")
function nonRepeat(str) {
    var first;

    str.split('').some(function (character, index, obj) {
        if(obj.indexOf(character) === obj.lastIndexOf(character)) {
            first = character;
            return true;
        }
         return false;
    });
    return first;
}
console.log(" first non-repeated  character:",nonRepeat("aanand"));
console.info("-------------------------------------------------------------------------")
console.log("Q5. Read about the Tower of Hanoi algorithm. Write a program to implement it.")
function toh(n,src,des,aux)
{
  if(n>=1)  
  {
    toh(n-1,src,aux,des);
    console.log("Move disk from tower ",src,"to tower",des);
    toh(n-1,aux,des,src);
  }
  return;
}
toh(3,"n1","n2","n3");

console.log("Q6.Write a program to convert postfix to prefix expression.")
function isOperator(x)
    { switch (x) {
        case '+':
        case '-':
        case '/':
        case '*':
            return true;
        }
        return false;
    }
    function postToPre(post_exp)
    {
        let s = [];
        let length = post_exp.length;
        for (let i = 0; i < length; i++) {
            if (isOperator(post_exp[i])) {
                let op1 = s[s.length - 1];
                s.pop();
                let op2 = s[s.length - 1];
                s.pop();
                let temp = post_exp[i] + op2 + op1;
                s.push(temp);
            }
            else {
                s.push(post_exp[i] + "");
            }
        }
        let ans = "";
        while (s.length > 0)
            ans += s.pop();
        return ans;
    }
     
    let post_exp = "xyz/-pq/r-*";
    console.log("Prefix : " + postToPre(post_exp));
    console.info("-------------------------------------------------------------------------")
    console.log("Q7. Write a program to convert prefix expression to infix expression.")
    function isOperator(x)
    {
        switch(x)
        {
            case '+':
            case '-':
            case '*':
            case '/':
            case '^':
            case '%':
                return true;
        }
        return false;
    }
    function convert(str)
    {
        let stack = [];
        let l = str.length;
        for(let i = l - 1; i >= 0; i--)
        {
            let c = str[i];
 
            if (isOperator(c))
            {
                let op1 = stack[stack.length - 1];
                stack.pop()
                let op2 = stack[stack.length - 1];
                stack.pop()
                let temp = "(" + op1 + c + op2 + ")";
                stack.push(temp);
            }
            else
            {
                stack.push(c + "");
            }
        }
        return stack[stack.length - 1];
    } 
    let expression = "*-A/BC-/ADE";
    console.log("Infix : " + convert(expression));
console.info("-------------------------------------------------------------------------")
console.log("Q8. Write a program to check if all the brackets are closed in a given code snippet.")
class Stack{
  #items
  #size
  constructor(){
    this.#items = []
    this.#size = 0
    this.minstack=[]
  }
  Push(val){
    this.#items.push(val)
    this.#size += 1
  }
  Pop(){
    if(this.#size == 0){
      return "Underflow"
    }
    else{
      let deletedItem = this.#items.pop()
      // console.log('Deleted '+deletedItem)
      this.#size -= 1
      return deletedItem
    }
    }
  Peek(){
    console.log(this.#items[this.#size - 1])
  }
  display(){
    console.log(this.#items)
  }
  getSize(){
    return this.#size
  }
}

var exp =  '[()]{}{[()()]()}'
var expStack = new Stack()
function isclosed(exp){
 for(let i=0;i<exp.length;i++){
    var b = exp[i]
    if(b=='(' || b=='{' || b=='['){
      expStack.Push(b)
      continue
    }
    if(expStack.getSize() == 0){
      return false
    }
    var bracket = expStack.Pop()
    switch(b){
      case ')' :
        if(bracket == '[' || bracket == '{'){
          return false
        }
        break
       
      case '}':
        if(bracket == '[' || bracket == '('){
          return false
        }
        break
      
      case ']':
        if(bracket == '(' || bracket == '{'){
          return false
        }
        break
    }
  }
  return expStack.getSize() == 0 ? true : false
}

var result = isclosed(exp)
if(result == true){
  console.log('closed')
}
else{
  console.log('notclosed')
}
console.info("-------------------------------------------------------------------------")
console.log("Q9. Write a program to reverse a stack.")
let stack = new Stack()
let arr2=[2,3,5,7,11]
let rvrs=[];
for(let i=0; i<arr2.length; i++){
 stack.Push(arr2[i]) 
}
stack.display()
for(let i=0; i<arr2.length; i++){
  rvrs.push(stack.Pop())
}
console.log(rvrs);
console.info("-------------------------------------------------------------------------")
console.log("Q10. Write a program to find the smallest number using a stack.")
class MinStack {
  constructor() {
    this.stack = []; 
    this.minStack = []; 
  }

  push(val) {
    this.stack.push(val); 
    if (this.minStack.length === 0 || val <= this.getMin()) {
      this.minStack.push(val);
    }
  }
  pop() {
    const popped = this.stack.pop();
    if (popped === this.getMin()) {
      this.minStack.pop();
    }
  }
  getMin() {
    return this.minStack[this.minStack.length - 1];
  }
}
const stacknew = new MinStack();
stacknew.push(9);
stacknew.push(7);
stacknew.push(8);
console.log("Current Minimum: ", stacknew.getMin());
    </script>
  </body>
</html>
